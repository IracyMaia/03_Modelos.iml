algorithm = c("svm", "nnt", "max", "gp", "rf", "brt", "glm", "gam"), #mean es el ensamble for bees
ensemble = NULL,
threshold = FALSE,
return_vector = TRUE
)
require(flexsdm)
ire(dplyr)
require(dplyr)
lyr)
require(dplyr)
require(terra)
require(flexsdm)
require(flexsdm)
require(here)
require(progress)
require(ape)
getwd()
## %######################################################%##
#                                                          #
####             Create directory structure             ####
#                                                          #
## %######################################################%##
dir <- flexsdm::sdm_directory(
main_dir = file.path(getwd(), "1-SDM"),
calibration_area = TRUE,
algorithm = c("svm", "nnt", "max", "gp", "rf", "brt", "glm", "gam"), #mean es el ensamble for bees
ensemble = NULL,
threshold = FALSE,
return_vector = TRUE
)
require(dplyr)
require(terra)
require(flexsdm)
require(dplyr)
require(dplyr)
require(terra)
require(flexsdm)
require(flexsdm)
require(here)
require(progress)
require(ape)
###### Packages
require(dplyr) # Manipulate data
require(readr) # Read and write data
require(ridigbio) # Download data from iDigBio
require(rgbif) # Download data from GBIF
require(rinat) # Download data from inaturaList
require(Rocc) # Download data from speciesLink
# Despite bdc is available on CRAN for this class we advice to install the development version
# available on GitHub (installed above)
require(bdc) # Biodiversity data cleaning https://brunobrr.github.io/bdc/index.html
require(ggplot2) # Plot data
require(sf) # For handling spatial data
require(maps) # A spatial database of country boundaries
## %######################################################%##
#                                                          #
####                   3-Pre-modeling                   ####
#                                                          #
## %######################################################%##
install.packages("flexsdm")
install.packages(c("crul", "deldir", "DT", "duckdb", "httpuv", "knitr", "learnr", "maptools", "rgeos", "s2", "sf", "sp", "stringfish", "sys", "tzdb"))
## %######################################################%##
#                                                          #
####                   3-Pre-modeling                   ####
#                                                          #
## %######################################################%##
install.packages("flexsdm")
## %######################################################%##
#                                                          #
####                   3-Pre-modeling                   ####
#                                                          #
## %######################################################%##
remotes::install_github("sjevelazco/flexsdm")
require(dplyr)
require(terra)
require(flexsdm)
require(here)
require(progress)
require(ape)
getwd()
## %######################################################%##
#                                                          #
####             Create directory structure             ####
#                                                          #
## %######################################################%##
dir <- flexsdm::sdm_directory(
main_dir = file.path(getwd(), "1-SDM"),
calibration_area = TRUE,
algorithm = c("gam", "gau", "gbm", "glm", "max", "net", "raf", "svm", "mean"), #mean es el ensamble for bees
ensemble = NULL,
threshold = FALSE,
return_vector = TRUE
)
# dir[1] %>% fs::dir_tree(., recurse = TRUE)
dir %>% head()
# Occ database
unfilt_occ <- data.table::fread(here("occ_final_unfiltered.txt")) %>%
dplyr::tibble()
names(unfilt_occ)
unfilt_occ <- unfilt_occ %>% dplyr::select(id, species, x, y)
View(unfilt_occ)
## %######################################################%##
#                                                          #
####                  Calibration area                  ####
#                                                          #
## %######################################################%##
here()
# Ecoregion
eco <- terra::vect("./Variables_US_to_Patagonia_5km/Ecoregions/Ecoregions.gpkg")
View(eco)
# Ecoregion
eco <- terra::vect("./Variables_US_to_Patagonia_5km/Ecoregions/Ecoregions.gpkg")
# Process species
sp <- unfilt_occ$species %>%
unique() %>%
sort()
i=1
x2 <-
flexsdm::calib_area(
data = unfilt_occ[unfilt_occ$species == sp[i], ],
x = "x",
y = "y",
method = c("mask", eco, "ECO_ID")
)
x2$ECO_NAME <- NULL
plot(x2)
points(unfilt_occ[unfilt_occ$species == sp[i], c("x", "y")])
points(unfilt_occ[unfilt_occ$species == sp[i], c("x", "y")], pch=19, col="blue")
for (i in 1:length(sp)) {
x2 <-
flexsdm::calib_area(
data = unfilt_occ[unfilt_occ$species == sp[i], ],
x = "x",
y = "y",
method = c("mask", eco, "ECO_ID")
)
x2$ECO_NAME <- NULL
terra::writeVector(x2,
file.path(dir[6], paste0(sp[i], ".gpkg")), overwrite = TRUE)
}
rm(unfilt_occ)
##%######################################################%##
#                                                          #
####               Evaluar la correlacion               ####
####          entre las variables ambientales           ####
#                                                          #
##%######################################################%##
require(ggplot2)
library(corrplot)
env_variables <- list.files("./Variav/", pattern = ".tif", full.names = TRUE) %>%
terra::rast() # una variable ambiental
names(env_variables)
corr <- correct_colinvar(env_layer = env_variables, method = c('pearson', th='0.7'))
mtrx <- corr$cor_table
mtrx[mtrx<0.7] <- 0
corrplot(mtrx, type="upper", order="hclust")
corrplot(mtrx, type="upper", order="hclust")
# filt escrever o vector com os nomes das variaveis ambientais selecionadas
filt <- c("silt_0-5cm", "hurs_mean", "bio17", "bio18",  "cmi_mean")
filt_m <- !colnames(mtrx)%in%filt
corrplot(mtrx[filt_m,filt_m], type="upper", order="hclust")
# filt escrever o vector com os nomes das variaveis ambientais selecionadas
filt <- c("silt_0-5cm", "hurs_mean", "bio17", "bio18",  "cmi_mean", "bio10", "bio13", "bio14")
filt_m <- !colnames(mtrx)%in%filt
corrplot(mtrx[filt_m,filt_m], type="upper", order="hclust")
env_variables <- env_variables[[!names(env_variables)%in%filt]]
# filt escrever o vector com os nomes das variaveis ambientais selecionadas
filt <- c("silt_0-5cm", "hurs_mean", "bio17", "bio18",  "cmi_mean", "bio10", "bio13", "bio14", "bio8", "bio6")
filt_m <- !colnames(mtrx)%in%filt
corrplot(mtrx[filt_m,filt_m], type="upper", order="hclust")
# filt escrever o vector com os nomes das variaveis ambientais selecionadas
filt <- c("silt_0-5cm", "hurs_mean", "bio17", "bio18",  "cmi_mean", "bio10", "bio13", "bio14", "bio8", "bio6", "bio11")
filt_m <- !colnames(mtrx)%in%filt
corrplot(mtrx[filt_m,filt_m], type="upper", order="hclust")
env_variables <- env_variables[[!names(env_variables)%in%filt]]
# filt escrever o vector com os nomes das variaveis ambientais selecionadas
filt <- c("silt_0-5cm", "hurs_mean", "bio17", "bio18",  "cmi_mean", "bio10", "bio13", "bio14", "bio8", "bio6", "bio11", "bio4", "bio3")
# filt escrever o vector com os nomes das variaveis ambientais selecionadas
filt <- c("silt_0-5cm", "hurs_mean", "bio17", "bio18",  "cmi_mean", "bio10", "bio13", "bio14", "bio8", "bio6", "bio11", "bio4", "bio3", "bio7")
filt_m <- !colnames(mtrx)%in%filt
corrplot(mtrx[filt_m,filt_m], type="upper", order="hclust")
env_variables <- env_variables[[!names(env_variables)%in%filt]]
# filt escrever o vector com os nomes das variaveis ambientais selecionadas
filt <- c("silt_0-5cm", "hurs_mean", "bio17", "bio18",  "cmi_mean", "bio10", "bio13", "bio14", "bio8", "bio6", "bio11", "bio4", "bio3", "bio7", "bio19", "bio16")
filt_m <- !colnames(mtrx)%in%filt
corrplot(mtrx[filt_m,filt_m], type="upper", order="hclust")
env_variables <- env_variables[[!names(env_variables)%in%filt]]
# filt escrever o vector com os nomes das variaveis ambientais selecionadas
filt <- c("silt_0-5cm", "hurs_mean", "bio17", "bio18",  "cmi_mean", "bio10", "bio13", "bio14", "bio8", "bio6", "bio11", "bio4", "bio3", "bio7", "bio19", "bio16", "bio1")
filt_m <- !colnames(mtrx)%in%filt
corrplot(mtrx[filt_m,filt_m], type="upper", order="hclust")
env_variables <- env_variables[[!names(env_variables)%in%filt]]
names(env_variables)
dir.create("./Variaveisusadas_filtradas")
terra::writeRaster(env_variables, file.path("./Variablesusadas_filtradas", paste0(names(env_variables), ".tif")))
dir.create("./Variaveisusadas_filtradas")
terra::writeRaster(env_variables, file.path("./Variablesusadas_filtradas", paste0(names(env_variables), ".tif")))
paste0(names(env_variables), ".tif")
terra::writeRaster(env_variables, file.path("./Variaveisusadas_filtradas", paste0(names(env_variables), ".tif")))
##%######################################################%##
#                                                          #
####            Filtering species occurrence            ####
#                                                          #
##%######################################################%##
# Registros de especies no filtradas
db0 <- data.table::fread(here("occ_final_unfiltered.txt")) %>%
dplyr::tibble()
db0 <- db0 %>% dplyr::select(id = db_id, species = accepted_name_bin, x, y)
##%######################################################%##
#                                                          #
####            Filtering species occurrence            ####
#                                                          #
##%######################################################%##
# Registros de especies no filtradas
db0 <- data.table::fread(here("occ_final_unfiltered.txt")) %>%
dplyr::tibble()
db0 <- db0 %>% dplyr::select(id = db_id, species = accepted_name_bin, x, y)
##%######################################################%##
#                                                          #
####            Filtering species occurrence            ####
#                                                          #
##%######################################################%##
# Registros de especies no filtradas
db0 <- data.table::fread(here("occ_final_unfiltered.txt")) %>%
dplyr::tibble()
db0 <- db0 %>% dplyr::select(id = id, species = accepted_name_bin, x, y)
##%######################################################%##
#                                                          #
####            Filtering species occurrence            ####
#                                                          #
##%######################################################%##
# Registros de especies no filtradas
db0 <- data.table::fread(here("occ_final_unfiltered.txt")) %>%
dplyr::tibble()
db0 <- db0 %>% dplyr::select(id = id, species = species, x, y)
nocc <- db0 %>% dplyr::group_by(species) %>%
dplyr::count() %>%
dplyr::arrange(species)
nocc
nocc <- nocc %>% mutate(need_bias_corr = FALSE)
nocc[nocc$n > 50, 3] <- TRUE
sp <- nocc %>% dplyr::filter(need_bias_corr==T) %>% pull(species)
env <- list.files("./Variablesusadas_filtradas/",
pattern = ".tif", full.names = TRUE) %>%
terra::rast() # una variable ambientales
sp <- nocc %>% dplyr::filter(need_bias_corr==T) %>% pull(species)
env <- list.files("./Variablesusadas_filtradas/",
pattern = ".tif", full.names = TRUE) %>%
terra::rast() # una variable ambientales
sp <- nocc %>% dplyr::filter(need_bias_corr==T) %>% pull(species)
env <- list.files("./Variaveisusadas_filtradas/",
pattern = ".tif", full.names = TRUE) %>%
terra::rast() # una variable ambientales
# Eliminamos aquellas especificas de especies fosoriales y aquaticas
env <- env[[!names(env)%in%c("cti", "clay_0-5cm", "sand_0-5cm")]]
names(env)
list_filt_occ <- list()
for(i in 1:length(sp)){
message(i/length(sp))
bin_4 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 4
)
bin_6 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 6
)
bin_8 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 8
)
bin_10 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 10
)
# Calculo de autocorrelacion espacial
list_bin <- list(bin_4, bin_6, bin_8, bin_10)
names(list_bin) <- c('bin_4', 'bin_6', 'bin_8', 'bin_10')
imoran <- list()
for(ii in 1:4){
coord <- list_bin[[ii]] %>% dplyr::select(x, y)
data <- data.frame(terra::extract(env, coord))[-1]
distm <- dist(coord)
distm <- as.matrix(distm)
distm <- 1/distm
diag(distm) <- 0
try(imoran[[ii]] <-
apply(data, 2, function(x)
ape::Moran.I(x, distm, na.rm = T)[c(1, 4)] %>% unlist) %>% data.frame() %>% as_tibble()
)
try(imoran[[ii]] <- imoran[[ii]][1,])
try(imoran[[ii]]$mean_bin <- apply(imoran[[ii]], 1, mean))
imoran[[ii]]$nrecords <- nrow(coord)
}
names(imoran) <- c('bin_4', 'bin_6', 'bin_8', 'bin_10')
imoran <- bind_rows(imoran, .id="nbins")
# Seleccion
bin_selected <- imoran %>%
filter(mean_bin <= mean(mean_bin)) %>%
filter(nrecords == max(nrecords)) %>%
pull("nbins")
bin_selected <- bin_selected[1]
# imoran <- data.frame(species=sp[i], imoran)
list_filt_occ[[i]] <- list_bin[[bin_selected]] %>% mutate(species=sp[i])
}
# Calculo de autocorrelacion espacial
list_bin <- list(bin_4, bin_6, bin_8, bin_10)
# Eliminamos aquellas especificas de especies fosoriales y aquaticas
env <- env[[!names(env)%in%c("cti", "clay_0-5cm", "sand_0-5cm")]]
names(env)
list_filt_occ <- list()
for(i in 1:length(sp)){
message(i/length(sp))
bin_4 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 4
)
bin_6 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 6
)
bin_8 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 8
)
bin_10 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 10
)
# Calculo de autocorrelacion espacial
list_bin <- list(bin_4, bin_6, bin_8, bin_10)
names(list_bin) <- c('bin_4', 'bin_6', 'bin_8', 'bin_10')
imoran <- list()
for(ii in 1:4){
coord <- list_bin[[ii]] %>% dplyr::select(x, y)
data <- data.frame(terra::extract(env, coord))[-1]
distm <- dist(coord)
distm <- as.matrix(distm)
distm <- 1/distm
diag(distm) <- 0
try(imoran[[ii]] <-
apply(data, 2, function(x)
ape::Moran.I(x, distm, na.rm = T)[c(1, 4)] %>% unlist) %>% data.frame() %>% as_tibble()
)
try(imoran[[ii]] <- imoran[[ii]][1,])
try(imoran[[ii]]$mean_bin <- apply(imoran[[ii]], 1, mean))
imoran[[ii]]$nrecords <- nrow(coord)
}
names(imoran) <- c('bin_4', 'bin_6', 'bin_8', 'bin_10')
imoran <- bind_rows(imoran, .id="nbins")
# Seleccion
bin_selected <- imoran %>%
filter(mean_bin <= mean(mean_bin)) %>%
filter(nrecords == max(nrecords)) %>%
pull("nbins")
bin_selected <- bin_selected[1]
# imoran <- data.frame(species=sp[i], imoran)
list_filt_occ[[i]] <- list_bin[[bin_selected]] %>% mutate(species=sp[i])
}
##%######################################################%##
#                                                          #
####            Filtering species occurrence            ####
#                                                          #
##%######################################################%##
# Registros de especies no filtradas
db0 <- data.table::fread(here("occ_final_unfiltered.txt")) %>%
dplyr::tibble()
require(dplyr)
require(terra)
require(flexsdm)
require(here)
require(progress)
require(ape)
}
require(dplyr)
require(terra)
require(flexsdm)
require(here)
require(progress)
require(ape)
getwd()
##%######################################################%##
#                                                          #
####            Filtering species occurrence            ####
#                                                          #
##%######################################################%##
# Registros de especies no filtradas
db0 <- data.table::fread(here("occ_final_unfiltered.txt")) %>%
dplyr::tibble()
db0 <- db0 %>% dplyr::select(id = id, species = species, x, y)
nocc <- db0 %>% dplyr::group_by(species) %>%
dplyr::count() %>%
dplyr::arrange(species)
nocc
nocc <- nocc %>% mutate(need_bias_corr = FALSE)
nocc[nocc$n > 50, 3] <- TRUE
sp <- nocc %>% dplyr::filter(need_bias_corr==T) %>% pull(species)
env <- list.files("./Variaveisusadas_filtradas/",
pattern = ".tif", full.names = TRUE) %>%
terra::rast() # una variable ambientales
# Eliminamos aquellas especificas de especies fosoriales y aquaticas
env <- env[[!names(env)%in%c("cti", "clay_0-5cm", "sand_0-5cm")]]
names(env)
list_filt_occ <- list()
for(i in 1:length(sp)){
message(i/length(sp))
bin_4 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 4
)
bin_6 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 6
)
bin_8 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 8
)
bin_10 <-
flexsdm::occfilt_env(
data = db0[db0$species==sp[i],],
x = "x",
y = "y",
id = "id",
env_layer = env,
nbins = 10
)
# Calculo de autocorrelacion espacial
list_bin <- list(bin_4, bin_6, bin_8, bin_10)
names(list_bin) <- c('bin_4', 'bin_6', 'bin_8', 'bin_10')
imoran <- list()
for(ii in 1:4){
coord <- list_bin[[ii]] %>% dplyr::select(x, y)
data <- data.frame(terra::extract(env, coord))[-1]
distm <- dist(coord)
distm <- as.matrix(distm)
distm <- 1/distm
diag(distm) <- 0
try(imoran[[ii]] <-
apply(data, 2, function(x)
ape::Moran.I(x, distm, na.rm = T)[c(1, 4)] %>% unlist) %>% data.frame() %>% as_tibble()
)
try(imoran[[ii]] <- imoran[[ii]][1,])
try(imoran[[ii]]$mean_bin <- apply(imoran[[ii]], 1, mean))
imoran[[ii]]$nrecords <- nrow(coord)
}
names(imoran) <- c('bin_4', 'bin_6', 'bin_8', 'bin_10')
imoran <- bind_rows(imoran, .id="nbins")
# Seleccion
bin_selected <- imoran %>%
filter(mean_bin <= mean(mean_bin)) %>%
filter(nrecords == max(nrecords)) %>%
pull("nbins")
bin_selected <- bin_selected[1]
# imoran <- data.frame(species=sp[i], imoran)
list_filt_occ[[i]] <- list_bin[[bin_selected]] %>% mutate(species=sp[i])
}
